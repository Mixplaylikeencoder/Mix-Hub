local function antiTamper()
    -- Получаем информацию о том, откуда был загружен скрипт
    local original_code = debug.getinfo(1, "S").source

    -- Проверяем, что скрипт был загружен с GitHub
    if not original_code:find("https://raw.githubusercontent.com/Mixplaylikeencoder/Mix-Hub/main/UI2") then
        error("Tampering detected!")
    end
end

local function antiDebug()
    if debug.getinfo(2, "n") then
        error("Debugging detected!")
    end
end

local function decryptConstant(encrypted, key)
    local decrypted = {}
    for i = 1, #encrypted do
        decrypted[i] = string.char(bit.bxor(string.byte(encrypted, i), key))
    end
    return table.concat(decrypted)
end

local function validateChecksum(expected)
    local actual = "some_hash_value"  -- replace with actual hash computation logic
    if actual ~= expected then
        error("Checksum mismatch detected!")
    end
end

-- Anti-tamper and anti-debug checks
antiTamper()
antiDebug()

-- Complex metatable and obfuscation setup
local function createObfuscatedMetatable()
    local _M = setmetatable({}, {})
    _M.__index = function(self, key)
        antiTamper()
        return self[key]
    end
    _M.__newindex = function(self, key, value)
        antiDebug()
        rawset(self, key, value)
    end
    -- Additional operator overloads...
    return _M
end

local ObfuscatedObject = setmetatable({}, createObfuscatedMetatable())
ObfuscatedObject.s3 = "obfuscation"

local encryptedPrint = "\112\114\105\110\116"
local encryptedMsg = "\72\101\108\108\111\44\32\79\98\102\117\115\99\97\116\101\100\32\87\111\114\108\100\33"
local key = 123456

-- Runtime decryption and execution
local X = decryptConstant(encryptedPrint, key)
local Y = decryptConstant(encryptedMsg, key)

for i = 1, 10 do
    ObfuscatedObject = ObfuscatedObject + i - i * i / i % i ^ i .. X
    ObfuscatedObject = -ObfuscatedObject * 1 + Y
    ObfuscatedObject = ObfuscatedObject // 2 ^ 3
    ObfuscatedObject = ObfuscatedObject .. ObfuscatedObject.s3
end

ObfuscatedObject = ObfuscatedObject + (X * 2 // 2 ^ 3) % 5 - 1 + " " .. Y

-- Final security checks before execution
validateChecksum("expected_hash_here")

-- Obfuscated execution
local FinalCode = loadstring(ObfuscatedObject())
FinalCode()
